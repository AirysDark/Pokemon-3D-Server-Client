name: Build Server & Client (stable, no csproj edits)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release
      CORE_DIR: Pokemon.3D.Server.Core
      CORE_CSPROJ: Pokemon.3D.Server.Core/Pokemon.3D.Server.Core.csproj
      CLIENT_CSPROJ: Pokemon.3D.Server.Client.GUI/Pokemon.3D.Server.Client.GUI.csproj
      STP_VERSION: 2.3.0
      STP_TFM: lib/net45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 1) Fetch SmartThreadPool.dll once into repo-local packages/
      - name: Fetch SmartThreadPool.dll package
        shell: pwsh
        run: |
          nuget install SmartThreadPool.dll -Version $env:STP_VERSION -OutputDirectory packages
          $pkg = Join-Path "packages" ("SmartThreadPool.dll." + $env:STP_VERSION)
          if (!(Test-Path $pkg)) { throw "SmartThreadPool.dll package not found: $pkg" }
          $dll = Join-Path $pkg (Join-Path $env:STP_TFM "SmartThreadPool.dll")
          if (!(Test-Path $dll)) { throw "SmartThreadPool.dll not found: $dll" }
          Write-Host "Using SmartThreadPool at $dll"

      # 2) Provide global MSBuild props/targets (applies to all projects in the repo)
      - name: Write Directory.Build.props (SmartThreadPool ref + stub includes)
        shell: pwsh
        run: |
          $props = @()
          $props += '<Project>'
          $props += '  <ItemGroup>'
          $props += '    <!-- Make SmartThreadPool.dll available to all projects -->'
          $props += '    <Reference Include="SmartThreadPool">'
          $props += '      <HintPath>$(MSBuildThisFileDirectory)packages\SmartThreadPool.dll.$(STP_VER)\$(STP_TFM)\SmartThreadPool.dll</HintPath>'
          $props += '      <Private>True</Private>'
          $props += '    </Reference>'
          $props += '  </ItemGroup>'
          $props += ''
          $props += '  <!-- Include generated stubs for Core (absolute paths built from this file) -->'
          $props += '  <PropertyGroup>'
          $props += '    <_CoreStubDir>$(MSBuildThisFileDirectory)$(CORE_DIR)\_GeneratedStubs\</_CoreStubDir>'
          $props += '  </PropertyGroup>'
          $props += '  <ItemGroup>'
          $props += '    <Compile Include="$(_CoreStubDir)Package.cs" Condition="Exists($(_CoreStubDir)Package.cs)" />'
          $props += '    <Compile Include="$(_CoreStubDir)PackageHandler.cs" Condition="Exists($(_CoreStubDir)PackageHandler.cs)" />'
          $props += '  </ItemGroup>'
          $props += '</Project>'
          $content = $props -join "`r`n"
          Set-Content -Path "Directory.Build.props" -Value $content -Encoding UTF8

          # supply variables used inside the props via msbuild env (we'll pass them at build time)
          'Wrote Directory.Build.props'

      - name: Write Directory.Build.targets (drop missing \Packages\*.cs)
        shell: pwsh
        run: |
          $t = @()
          $t += '<Project>'
          $t += '  <!-- Remove any Compile includes under \Packages\ if the files do not exist -->'
          $t += '  <Target Name="FilterMissingPackagesSources" BeforeTargets="CoreCompile">'
          $t += '    <ItemGroup>'
          $t += '      <!-- Unconditionally remove nonexistent \Packages\*.cs (prevents CS2001) -->'
          $t += '      <Compile Remove="**\Packages\**\*.cs" Condition="!Exists(''@(Compile)'')" />'
          $t += '    </ItemGroup>'
          $t += '  </Target>'
          $t += '</Project>'
          $content = $t -join "`r`n"
          Set-Content -Path "Directory.Build.targets" -Value $content -Encoding UTF8
          'Wrote Directory.Build.targets'

      # 3) Generate stubs ONLY if the real Package/PackageHandler are missing
      - name: Generate minimal Package/PackageHandler stubs (if missing)
        shell: pwsh
        run: |
          $coreDir = "${{ env.CORE_DIR }}"
          $real1 = Join-Path $coreDir "Server_Client_Listener\Packages\Package.cs"
          $real2 = Join-Path $coreDir "Server_Client_Listener\Packages\PackageHandler.cs"
          $need = -not ((Test-Path $real1) -and (Test-Path $real2))

          if ($need) {
            $stubDir = Join-Path $coreDir "_GeneratedStubs"
            New-Item -ItemType Directory -Force -Path $stubDir | Out-Null

            # Try to infer a namespace from Player.cs; else fallback
            $ns = "Temporary.Stubs"
            $player = Join-Path $coreDir "Server_Client_Listener\Players\Player.cs"
            if (Test-Path $player) {
              $raw = Get-Content $player -Raw
              $m = [Regex]::Match($raw, 'namespace\s+([A-Za-z0-9_.]+)')
              if ($m.Success) { $ns = $m.Groups[1].Value }
              $u = [Regex]::Match($raw, 'using\s+([A-Za-z0-9_.]+\.Packages)\s*;')
              if ($u.Success) { $ns = $u.Groups[1].Value }
            }

            $pkg = @()
            $pkg += '// <auto-generated/>'
            $pkg += "namespace $ns"
            $pkg += '{'
            $pkg += '  public class Package'
            $pkg += '  {'
            $pkg += '    public int Id { get; set; }'
            $pkg += '    public string Name { get; set; }'
            $pkg += '    public byte[] Data { get; set; }'
            $pkg += '    public Package() {}'
            $pkg += '    public Package(int id, string name, byte[] data = null) { Id = id; Name = name; Data = data; }'
            $pkg += '  }'
            $pkg += '}'
            Set-Content -Path (Join-Path $stubDir "Package.cs") -Value ($pkg -join "`r`n") -Encoding UTF8

            $hdl = @()
            $hdl += '// <auto-generated/>'
            $hdl += "namespace $ns"
            $hdl += '{'
            $hdl += '  public static class PackageHandler'
            $hdl += '  {'
            $hdl += '    public static void Send(Package p) {}'
            $hdl += '    public static Package Parse(byte[] buffer) { return new Package(); }'
            $hdl += '  }'
            $hdl += '}'
            Set-Content -Path (Join-Path $stubDir "PackageHandler.cs") -Value ($hdl -join "`r`n") -Encoding UTF8

            Write-Host "Generated stubs in $stubDir (namespace: $ns)"
          } else {
            Write-Host "Real Package files exist; no stubs generated."
          }

      # 4) Restore other NuGets (Newtonsoft.Json, SharpCompress, etc.)
      - name: Restore Core packages
        run: nuget restore "${{ env.CORE_CSPROJ }}"
      - name: Restore Client packages
        run: nuget restore "${{ env.CLIENT_CSPROJ }}"

      # 5) Build both projects (pass props variables for STP)
      - name: Build Server Core
        run: msbuild "${{ env.CORE_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /p:STP_VER=${{ env.STP_VERSION }} /p:STP_TFM=${{ env.STP_TFM }} /p:CORE_DIR=${{ env.CORE_DIR }} /m /v:m

      - name: Build Client GUI
        run: msbuild "${{ env.CLIENT_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /p:STP_VER=${{ env.STP_VERSION }} /p:STP_TFM=${{ env.STP_TFM }} /p:CORE_DIR=${{ env.CORE_DIR }} /m /v:m

      # 6) Zip artifacts
      - name: Zip Server
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Core\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Server-${{ env.CONFIGURATION }}.zip" -Force

      - name: Zip Client
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Client.GUI\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Client-${{ env.CONFIGURATION }}.zip" -Force

      - name: Upload Server ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Server-${{ env.CONFIGURATION }}
          path: Pokemon3D-Server-${{ env.CONFIGURATION }}.zip

      - name: Upload Client ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Client-${{ env.CONFIGURATION }}
          path: Pokemon3D-Client-${{ env.CONFIGURATION }}.zip
