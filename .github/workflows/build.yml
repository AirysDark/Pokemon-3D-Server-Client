name: Build Pokemon 3D (Server + Client)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    # Build both configs; remove Debug if you only want Release
    strategy:
      fail-fast: false
      matrix:
        configuration: [Release]

    env:
      CONFIGURATION: ${{ matrix.configuration }}

      # If you have a .sln, set it here; otherwise leave empty
      SOLUTION: ""

      # Paths to the projects (adjust if your folders differ)
      CORE_CSPROJ: Pokemon.3D.Server.Core/Pokemon.3D.Server.Core.csproj
      CLIENT_GUI_CSPROJ: Pokemon.3D.Server.Client.GUI/Pokemon.3D.Server.Client.GUI.csproj
      # If Updater causes issues, keep it disabled:
      # UPDATER_CSPROJ: Pokemon.3D.Server.Client.Updater/Pokemon.3D.Server.Client.Updater.csproj

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Cache NuGet (classic packages.config still benefits)
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\NuGet\Cache
            ~\AppData\Local\NuGet\v3-cache
            packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # Restore via .sln if you have one
      - name: Restore (solution) if present
        if: env.SOLUTION != ''
        run: nuget restore $env:SOLUTION

      # Otherwise restore per-project (packages.config style)
      - name: Restore (per project)
        if: env.SOLUTION == ''
        shell: pwsh
        run: |
          nuget restore "$env:CORE_CSPROJ"
          nuget restore "$env:CLIENT_GUI_CSPROJ"
          # if ($env:UPDATER_CSPROJ) { nuget restore "$env:UPDATER_CSPROJ" }

      # --- Build BOTH projects in this single job ---

      - name: Build Server Core
        run: msbuild "$env:CORE_CSPROJ" /p:Configuration=$env:CONFIGURATION /m /v:m

      - name: Build Client GUI
        run: msbuild "$env:CLIENT_GUI_CSPROJ" /p:Configuration=$env:CONFIGURATION /m /v:m

      # --- Package each output separately ---

      - name: Zip Server artifact
        shell: pwsh
        run: |
          $outDir = "Pokemon.3D.Server.Core\bin\$env:CONFIGURATION"
          if (!(Test-Path $outDir)) { throw "Server output not found: $outDir" }
          Compress-Archive -Path "$outDir\*" -DestinationPath "Pokemon3D-Server-$env:CONFIGURATION.zip" -Force

      - name: Zip Client artifact
        shell: pwsh
        run: |
          $outDir = "Pokemon.3D.Server.Client.GUI\bin\$env:CONFIGURATION"
          if (!(Test-Path $outDir)) { throw "Client output not found: $outDir" }
          Compress-Archive -Path "$outDir\*" -DestinationPath "Pokemon3D-Client-$env:CONFIGURATION.zip" -Force

      # --- Upload artifacts so you can download the zips ---

      - name: Upload Server ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Server-${{ matrix.configuration }}
          path: Pokemon3D-Server-${{ matrix.configuration }}.zip

      - name: Upload Client ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Client-${{ matrix.configuration }}
          path: Pokemon3D-Client-${{ matrix.configuration }}.zip
