name: Build Server & Client (auto-fix)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release
      CORE_CSPROJ: Pokemon.3D.Server.Core/Pokemon.3D.Server.Core.csproj
      CLIENT_GUI_CSPROJ: Pokemon.3D.Server.Client.GUI/Pokemon.3D.Server.Client.GUI.csproj
      STP_VERSION: 2.3.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # --- Patch project files safely ---
      - name: Strip bad ProjectReference + guard all *\Packages\*.cs includes
        shell: pwsh
        run: |
          $core   = "${{ env.CORE_CSPROJ }}"
          $client = "${{ env.CLIENT_GUI_CSPROJ }}"

          # 1) Remove stale SmartThreadPool ProjectReference in both projects
          $regexPR = '(?s)\s*<ProjectReference[^>]*SmartThreadPool\\SmartThreadPool\\SmartThreadPool\.csproj.*?</ProjectReference>'
          foreach ($f in @($core, $client)) {
            if (Test-Path $f) {
              $txt = Get-Content $f -Raw
              if ($txt -match $regexPR) {
                $txt = [Regex]::Replace($txt, $regexPR, '')
                Set-Content $f $txt
                Write-Host "Removed SmartThreadPool ProjectReference in $f"
              }
            }
          }

          # 2) Guard ANY Compile Include under a \Packages\ folder (missing files => skip)
          function Guard-PackagesIncludes($projPath) {
            if (!(Test-Path $projPath)) { return }
            [xml]$xml = Get-Content $projPath -Raw
            $ns = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)
            $ns.AddNamespace('msb', $xml.DocumentElement.NamespaceURI)
            $changed = $false
            foreach ($node in $xml.Project.SelectNodes("//msb:Compile[@Include]", $ns)) {
              $inc = $node.GetAttribute("Include")
              if ($inc -match "(?i)\\Packages\\.+\.cs$") {
                if (-not $node.HasAttribute("Condition")) {
                  $node.SetAttribute("Condition", "Exists('$inc')")
                  $changed = $true
                }
              }
            }
            if ($changed) { $xml.Save($projPath); Write-Host "Guarded \\Packages\\*.cs includes in $projPath" }
          }
          Guard-PackagesIncludes $core
          Guard-PackagesIncludes $client

      # --- Vendor SmartThreadPool via NuGet (correct package id = SmartThreadPool.dll) ---
      - name: Fetch SmartThreadPool package
        shell: pwsh
        run: |
          $ver = "${{ env.STP_VERSION }}"
          nuget install SmartThreadPool.dll -Version $ver -OutputDirectory packages
          $pkg = Join-Path "packages" ("SmartThreadPool.dll." + $ver)
          if (!(Test-Path $pkg)) { throw "SmartThreadPool.dll package not found: $pkg" }
          $dll = Join-Path $pkg "lib\net45\SmartThreadPool.dll"
          if (!(Test-Path $dll)) { throw "SmartThreadPool.dll not found: $dll" }
          Write-Host "Using SmartThreadPool: $dll"

      - name: Inject SmartThreadPool Reference (Core)
        shell: pwsh
        run: |
          $core = "${{ env.CORE_CSPROJ }}"
          if (!(Test-Path $core)) { throw "Missing $core" }
          $ver  = "${{ env.STP_VERSION }}"
          $hint = "..\packages\SmartThreadPool.dll.$ver\lib\net45\SmartThreadPool.dll"
          $xml  = Get-Content $core -Raw
          if ($xml -notmatch 'Reference Include="SmartThreadPool"') {
            $ref = "  <ItemGroup>`n    <Reference Include=""SmartThreadPool"">`n      <HintPath>$hint</HintPath>`n      <Private>True</Private>`n    </Reference>`n  </ItemGroup>`n"
            $xml = [Regex]::Replace($xml, '(?s)</Project>\s*$', ($ref + '</Project>'))
            Set-Content $core $xml
            Write-Host "Added SmartThreadPool reference to Core"
          } else { Write-Host "Core already has SmartThreadPool reference" }

      - name: Inject SmartThreadPool Reference (Client if needed)
        shell: pwsh
        run: |
          $client = "${{ env.CLIENT_GUI_CSPROJ }}"
          if (!(Test-Path $client)) { exit 0 }
          $needs = (Get-Content $client -Raw) -match 'Amib\.Threading'
          if ($needs) {
            $xml = Get-Content $client -Raw
            if ($xml -notmatch 'Reference Include="SmartThreadPool"') {
              $ver  = "${{ env.STP_VERSION }}"
              $hint = "..\packages\SmartThreadPool.dll.$ver\lib\net45\SmartThreadPool.dll"
              $ref  = "  <ItemGroup>`n    <Reference Include=""SmartThreadPool"">`n      <HintPath>$hint</HintPath>`n      <Private>True</Private>`n    </Reference>`n  </ItemGroup>`n"
              $xml  = [Regex]::Replace($xml, '(?s)</Project>\s*$', ($ref + '</Project>'))
              Set-Content $client $xml
              Write-Host "Added SmartThreadPool reference to Client"
            } else { Write-Host "Client already has SmartThreadPool reference" }
          } else { Write-Host "Client does not use Amib.Threading; skipping" }

      # --- Restore remaining NuGet packages and build both projects ---
      - name: Restore Core packages
        run: nuget restore "${{ env.CORE_CSPROJ }}"
      - name: Restore Client packages
        run: nuget restore "${{ env.CLIENT_GUI_CSPROJ }}"

      - name: Build Server Core
        run: msbuild "${{ env.CORE_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /m /v:m
      - name: Build Client GUI
        run: msbuild "${{ env.CLIENT_GUI_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /m /v:m

      # --- Package artifacts ---
      - name: Zip Server
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Core\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Server-${{ env.CONFIGURATION }}.zip" -Force

      - name: Zip Client
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Client.GUI\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Client-${{ env.CONFIGURATION }}.zip" -Force

      - name: Upload Server ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Server-${{ env.CONFIGURATION }}
          path: Pokemon3D-Server-${{ env.CONFIGURATION }}.zip

      - name: Upload Client ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Client-${{ env.CONFIGURATION }}
          path: Pokemon3D-Client-${{ env.CONFIGURATION }}.zip
