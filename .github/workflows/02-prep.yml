name: 02 - Build Server

on:
  workflow_run:
    workflows: ["01 - Prep Overlay"]
    types: [completed]

env:
  CONFIGURATION: Release
  CORE_DIR: Pokemon.3D.Server.Core
  CORE_CSPROJ: Pokemon.3D.Server.Core/Pokemon.3D.Server.Core.csproj
  STP_VERSION: 2.3.0
  STP_TFM: lib/net45

jobs:
  build-server:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    steps:
      - name: Checkout same commit as prep
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Restore overlay cache
        uses: actions/cache/restore@v4
        with:
          path: ci-overlay
          key: overlay-${{ github.event.workflow_run.head_sha }}-${{ github.event.workflow_run.id }}
          restore-keys: |
            overlay-${{ github.event.workflow_run.head_sha }}-

      - name: Copy overlay into repo (if present)
        shell: pwsh
        run: |
          if (Test-Path ci-overlay) { Copy-Item -Recurse -Force ci-overlay\* .\ }

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Setup MSBuild (VS Build Tools)
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,)'

      # Ensure STP package + props that include our stub folder
      - name: Ensure SmartThreadPool + Directory.Build.props
        shell: pwsh
        run: |
          if (!(Test-Path "packages\SmartThreadPool.dll.$env:STP_VERSION")) {
            nuget install SmartThreadPool.dll -Version $env:STP_VERSION -OutputDirectory packages
          }

          # Create or update Directory.Build.props to include STP reference + stub folder compile include
          if (!(Test-Path "Directory.Build.props")) {
            $lines = @(
              '<Project>',
              '  <ItemGroup>',
              '    <Reference Include="SmartThreadPool">',
              '      <HintPath>$(MSBuildThisFileDirectory)packages\SmartThreadPool.dll.$(STP_VER)\$(STP_TFM)\SmartThreadPool.dll</HintPath>',
              '      <Private>True</Private>',
              '    </Reference>',
              '  </ItemGroup>',
              '  <PropertyGroup>',
              '    <_StubDir>$(MSBuildThisFileDirectory)$(CORE_DIR)\_GeneratedStubs\</_StubDir>',
              '  </PropertyGroup>',
              '  <ItemGroup>',
              '    <Compile Include="$(_StubDir)*.cs" Condition="Exists($(_StubDir))" />',
              '  </ItemGroup>',
              '</Project>'
            )
            Set-Content -Path "Directory.Build.props" -Value ($lines -join "`r`n") -Encoding UTF8
          } else {
            $props = Get-Content "Directory.Build.props" -Raw
            if ($props -notmatch '_GeneratedStubs') {
              $add = @(
                '  <PropertyGroup>',
                '    <_StubDir>$(MSBuildThisFileDirectory)$(CORE_DIR)\_GeneratedStubs\</_StubDir>',
                '  </PropertyGroup>',
                '  <ItemGroup>',
                '    <Compile Include="$(_StubDir)*.cs" Condition="Exists($(_StubDir))" />',
                '  </ItemGroup>'
              ) -join "`r`n"
              $props = $props -replace '(?s)</Project>\s*$', "$add`r`n</Project>"
              Set-Content -Path "Directory.Build.props" -Value $props -Encoding UTF8
            }
          }

      # HARD REMOVE the project's stale Compile includes that point to missing \Packages\*.cs
      - name: Write Directory.Build.targets (force-remove Packages/*.cs includes)
        shell: pwsh
        run: |
          $t = @(
            '<Project>',
            '  <!-- Remove any Compile includes under these Packages folders at evaluation time -->',
            '  <ItemGroup>',
            '    <Compile Remove="Pokemon.3D.Server.Core\RCON_GUI_Client_Listener\Packages\**\*.cs" />',
            '    <Compile Remove="Pokemon.3D.Server.Core\Server_Client_Listener\Packages\**\*.cs" />',
            '    <Compile Remove="Pokemon.3D.Server.Core\RCON_Client_Listener\Packages\**\*.cs" />',
            '  </ItemGroup>',
            '</Project>'
          )
          Set-Content -Path "Directory.Build.targets" -Value ($t -join "`r`n") -Encoding UTF8

      # Detect all namespaces that use "*.Packages" and generate stubs in ALL of them
      - name: Generate multi-namespace Package stubs
        shell: pwsh
        run: |
          $core = "$env:CORE_DIR"
          $stubDir = Join-Path $core "_GeneratedStubs"
          New-Item -ItemType Directory -Force -Path $stubDir | Out-Null

          $namespaces = New-Object System.Collections.Generic.HashSet[string]
          Get-ChildItem -Path . -Recurse -Filter *.cs | ForEach-Object {
            $text = Get-Content $_.FullName -Raw
            foreach ($m in [Regex]::Matches($text, 'using\s+([A-Za-z0-9_.]+\.Packages)\s*;')) {
              [void]$namespaces.Add($m.Groups[1].Value)
            }
          }
          if ($namespaces.Count -eq 0) {
            $player = Join-Path $core "Server_Client_Listener\Players\Player.cs"
            if (Test-Path $player) {
              $raw = Get-Content $player -Raw
              $m = [Regex]::Match($raw, 'namespace\s+([A-Za-z0-9_.]+)\.Players')
              if ($m.Success) { [void]$namespaces.Add($m.Groups[1].Value + ".Packages") }
            }
          }
          if ($namespaces.Count -eq 0) { [void]$namespaces.Add("Temporary.Stubs.Packages") }

          $sb = New-Object System.Text.StringBuilder
          foreach ($ns in $namespaces) {
            [void]$sb.AppendLine("// <auto-generated/>")
            [void]$sb.AppendLine("namespace $ns")
            [void]$sb.AppendLine("{")
            [void]$sb.AppendLine("  public class Package")
            [void]$sb.AppendLine("  {")
            [void]$sb.AppendLine("    public int Id { get; set; }")
            [void]$sb.AppendLine("    public string Name { get; set; }")
            [void]$sb.AppendLine("    public byte[] Data { get; set; }")
            [void]$sb.AppendLine("    public Package() {}")
            [void]$sb.AppendLine("    public Package(int id, string name, byte[] data = null) { Id = id; Name = name; Data = data; }")
            [void]$sb.AppendLine("  }")
            [void]$sb.AppendLine("}")
            [void]$sb.AppendLine()
            [void]$sb.AppendLine("namespace $ns")
            [void]$sb.AppendLine("{")
            [void]$sb.AppendLine("  public static class PackageHandler")
            [void]$sb.AppendLine("  {")
            [void]$sb.AppendLine("    public static void Send(Package p) {}")
            [void]$sb.AppendLine("    public static Package Parse(byte[] buffer) { return new Package(); }")
            [void]$sb.AppendLine("  }")
            [void]$sb.AppendLine("}")
            [void]$sb.AppendLine()
          }
          Set-Content -Path (Join-Path $stubDir "Packages.Stubs.cs") -Value $sb.ToString() -Encoding UTF8
          Write-Host "Generated stubs for namespaces:"
          $namespaces | ForEach-Object { Write-Host "  - $_" }

      - name: Restore Core packages
        run: nuget restore "${{ env.CORE_CSPROJ }}"

      - name: Build Server Core
        run: msbuild "${{ env.CORE_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /p:STP_VER=${{ env.STP_VERSION }} /p:STP_TFM=${{ env.STP_TFM }} /p:CORE_DIR=${{ env.CORE_DIR }} /m /v:m

      - name: Zip Server
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Core\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Server-${{ env.CONFIGURATION }}.zip" -Force

      - name: Upload Server ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Server-${{ env.CONFIGURATION }}
          path: Pokemon3D-Server-${{ env.CONFIGURATION }}.zip
