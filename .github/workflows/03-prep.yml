name: 03 - Build Client

on:
  workflow_run:
    workflows: ["02 - Build Server"]
    types: [completed]

env:
  CONFIGURATION: Release
  CORE_DIR: Pokemon.3D.Server.Core
  CLIENT_CSPROJ: Pokemon.3D.Server.Client.GUI/Pokemon.3D.Server.Client.GUI.csproj
  STP_VERSION: 2.3.0
  STP_TFM: lib/net45

jobs:
  build-client:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    steps:
      - name: Checkout same commit as server
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Restore overlay cache
        uses: actions/cache/restore@v4
        with:
          path: ci-overlay
          key: overlay-${{ github.event.workflow_run.head_sha }}-${{ github.event.workflow_run.id }}
          restore-keys: |
            overlay-${{ github.event.workflow_run.head_sha }}-

      - name: Copy overlay into repo (if present)
        shell: pwsh
        run: |
          if (Test-Path ci-overlay) { Copy-Item -Recurse -Force ci-overlay\* .\ }

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Setup MSBuild (VS Build Tools)
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,)'

      # Ensure STP + props with stubs include (same as server)
      - name: Ensure SmartThreadPool + Directory.Build.props
        shell: pwsh
        run: |
          if (!(Test-Path "packages\SmartThreadPool.dll.$env:STP_VERSION")) {
            nuget install SmartThreadPool.dll -Version $env:STP_VERSION -OutputDirectory packages
          }
          if (!(Test-Path "Directory.Build.props")) {
            $lines = @(
              '<Project>',
              '  <ItemGroup>',
              '    <Reference Include="SmartThreadPool">',
              '      <HintPath>$(MSBuildThisFileDirectory)packages\SmartThreadPool.dll.$(STP_VER)\$(STP_TFM)\SmartThreadPool.dll</HintPath>',
              '      <Private>True</Private>',
              '    </Reference>',
              '  </ItemGroup>',
              '  <PropertyGroup>',
              '    <_StubDir>$(MSBuildThisFileDirectory)$(CORE_DIR)\_GeneratedStubs\</_StubDir>',
              '  </PropertyGroup>',
              '  <ItemGroup>',
              '    <Compile Include="$(_StubDir)*.cs" Condition="Exists($(_StubDir))" />',
              '  </ItemGroup>',
              '</Project>'
            )
            Set-Content -Path "Directory.Build.props" -Value ($lines -join "`r`n") -Encoding UTF8
          } else {
            $props = Get-Content "Directory.Build.props" -Raw
            if ($props -notmatch '_GeneratedStubs') {
              $add = @(
                '  <PropertyGroup>',
                '    <_StubDir>$(MSBuildThisFileDirectory)$(CORE_DIR)\_GeneratedStubs\</_StubDir>',
                '  </PropertyGroup>',
                '  <ItemGroup>',
                '    <Compile Include="$(_StubDir)*.cs" Condition="Exists($(_StubDir))" />',
                '  </ItemGroup>'
              ) -join "`r`n"
              $props = $props -replace '(?s)</Project>\s*$', "$add`r`n</Project>"
              Set-Content -Path "Directory.Build.props" -Value $props -Encoding UTF8
            }
          }

      - name: Write Directory.Build.targets (filter missing Packages/*.cs)
        shell: pwsh
        run: |
          $t = @(
            '<Project>',
            '  <Target Name="FilterMissingPackagesSources" BeforeTargets="CoreCompile">',
            '    <ItemGroup>',
            "      <Compile Remove=""**\Packages\**\*.cs"" Condition=""!Exists(''**\Packages\**\*.cs'')"" />",
            '    </ItemGroup>',
            '  </Target>',
            '</Project>'
          )
          Set-Content -Path "Directory.Build.targets" -Value ($t -join "`r`n") -Encoding UTF8

      - name: Restore Client packages
        run: nuget restore "${{ env.CLIENT_CSPROJ }}"

      - name: Build Client GUI
        run: msbuild "${{ env.CLIENT_CSPROJ }}" /p:Configuration=${{ env.CONFIGURATION }} /p:STP_VER=${{ env.STP_VERSION }} /p:STP_TFM=${{ env.STP_TFM }} /p:CORE_DIR=${{ env.CORE_DIR }} /m /v:m

      - name: Zip Client
        shell: pwsh
        run: |
          $out = "Pokemon.3D.Server.Client.GUI\bin\${{ env.CONFIGURATION }}"
          if (!(Test-Path $out)) { throw "Missing $out" }
          Compress-Archive -Path "$out\*" -DestinationPath "Pokemon3D-Client-${{ env.CONFIGURATION }}.zip" -Force

      - name: Upload Client ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pokemon3D-Client-${{ env.CONFIGURATION }}
          path: Pokemon3D-Client-${{ env.CONFIGURATION }}.zip
