name: 01 - Prep Overlay

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  STP_VERSION: 2.3.0
  STP_TFM: lib/net45
  CORE_DIR: Pokemon.3D.Server.Core

jobs:
  prep:
    runs-on: windows-latest
    steps:
      - name: Checkout (this commit)
        uses: actions/checkout@v4

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2

      - name: Make overlay folder
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path ci-overlay | Out-Null

      - name: Fetch SmartThreadPool.dll (NuGet)
        shell: pwsh
        run: |
          nuget install SmartThreadPool.dll -Version $env:STP_VERSION -OutputDirectory ci-overlay\packages
          $pkg = Join-Path "ci-overlay\packages" ("SmartThreadPool.dll." + $env:STP_VERSION)
          if (!(Test-Path $pkg)) { throw "SmartThreadPool.dll package not found: $pkg" }
          $dll = Join-Path $pkg (Join-Path $env:STP_TFM "SmartThreadPool.dll")
          if (!(Test-Path $dll)) { throw "SmartThreadPool.dll not found: $dll" }
          Write-Host "Using SmartThreadPool: $dll"

      - name: Write Directory.Build.props (overlay)
        shell: pwsh
        run: |
          $lines = @()
          $lines += '<Project>'
          $lines += '  <ItemGroup>'
          $lines += '    <Reference Include="SmartThreadPool">'
          $lines += '      <HintPath>$(MSBuildThisFileDirectory)packages\SmartThreadPool.dll.$(STP_VER)\$(STP_TFM)\SmartThreadPool.dll</HintPath>'
          $lines += '      <Private>True</Private>'
          $lines += '    </Reference>'
          $lines += '  </ItemGroup>'
          $lines += '</Project>'
          $content = $lines -join "`r`n"
          Set-Content -Path "ci-overlay/Directory.Build.props" -Value $content -Encoding UTF8

      - name: Generate Package/PackageHandler stubs if missing (overlay)
        shell: pwsh
        run: |
          $core = "$env:CORE_DIR"
          $targets = @(
            "Server_Client_Listener\Packages\Package.cs",
            "Server_Client_Listener\Packages\PackageHandler.cs",
            "RCON_Client_Listener\Packages\Package.cs",
            "RCON_Client_Listener\Packages\PackageHandler.cs",
            "RCON_GUI_Client_Listener\Packages\Package.cs",
            "RCON_GUI_Client_Listener\Packages\PackageHandler.cs"
          )
          # infer packages namespace
          $ns = "Temporary.Stubs"
          $player = Join-Path $core "Server_Client_Listener\Players\Player.cs"
          if (Test-Path $player) {
            $raw = Get-Content $player -Raw
            $m = [Regex]::Match($raw, 'namespace\s+([A-Za-z0-9_.]+)\.Players')
            if ($m.Success) { $ns = $m.Groups[1].Value + ".Packages" }
            else {
              $u = [Regex]::Match($raw, 'using\s+([A-Za-z0-9_.]+\.Packages)\s*;')
              if ($u.Success) { $ns = $u.Groups[1].Value }
            }
          }
          foreach ($rel in $targets) {
            $repoFile = Join-Path $core $rel
            if (Test-Path $repoFile) { continue } # real file exists; skip
            $overlayFile = Join-Path "ci-overlay" (Join-Path $core $rel)
            New-Item -ItemType Directory -Force -Path (Split-Path $overlayFile) | Out-Null
            if ($overlayFile -like "*PackageHandler.cs") {
              $code = @(
                "// <auto-generated/>",
                "namespace $ns",
                "{",
                "  public static class PackageHandler",
                "  {",
                "    public static void Send(Package p) {}",
                "    public static Package Parse(byte[] buffer) { return new Package(); }",
                "  }",
                "}"
              )
            } else {
              $code = @(
                "// <auto-generated/>",
                "namespace $ns",
                "{",
                "  public class Package",
                "  {",
                "    public int Id { get; set; }",
                "    public string Name { get; set; }",
                "    public byte[] Data { get; set; }",
                "    public Package() {}",
                "    public Package(int id, string name, byte[] data = null) { Id = id; Name = name; Data = data; }",
                "  }",
                "}"
              )
            }
            Set-Content -Path $overlayFile -Value ($code -join "`r`n") -Encoding UTF8
            Write-Host "Stubbed into overlay: $rel  (ns: $ns)"
          }

      - name: Cache overlay (key = commit sha)
        uses: actions/cache/save@v4
        with:
          path: ci-overlay
          key: overlay-${{ github.sha }}
